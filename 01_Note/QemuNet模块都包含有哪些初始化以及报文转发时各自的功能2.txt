虚拟网卡设备的初始化的过程如下：


DeviceState *qdev_device_add(QemuOpts *opts)
{

    /* create device, set properties */
    dev = DEVICE(object_new(driver));

}

Object *object_new(const char *typename)
{
    TypeImpl *ti = type_get_by_name(typename);

    return object_new_with_type(ti);
}

Object *object_new_with_type(Type type)
{

    type_initialize(type);

    obj = g_malloc(type->instance_size);
    object_initialize_with_type(obj, type->instance_size, type);
    obj->free = g_free;
}


void object_initialize_with_type(void *data, size_t size, TypeImpl *type)
{
    type_initialize(type);

    object_init_with_type(obj, type);
}


static void type_initialize(TypeImpl *ti)
{


    if (ti->class_init) {
        ti->class_init(ti->class, ti->class_data);  ------>这里做了class的初始化，即调用virtio_net_class_init
    }


}


static void object_init_with_type(Object *obj, TypeImpl *ti)
{
    if (type_has_parent(ti)) {
        object_init_with_type(obj, type_get_parent(ti));
    }

    if (ti->instance_init) {
        ti->instance_init(obj);  --------->这里做了instance的初始化即调用virtio_net_instance_init
    }
}






然后，调用 virtio_net_device_init 的地方在如下：

static int virtio_device_init(DeviceState *qdev)
{
    VirtIODevice *vdev = VIRTIO_DEVICE(qdev);
    VirtioDeviceClass *k = VIRTIO_DEVICE_GET_CLASS(qdev);
    assert(k->init != NULL);
    if (k->init(vdev) < 0) {             -----> k->init挂接的就是virtio_net_device_init这个函数
        return -1;
    }
    virtio_bus_device_plugged(vdev);
    return 0;
}

而virtio_device_init又是在 VirtioDeviceClass 的父类 ObjectClass的类初始化函数，
所以当上面的ti->class_init(就是这里的)被调用的时候，自然就会 调用 virtio_device_init

static void virtio_device_class_init(ObjectClass *klass, void *data)
{
    /* Set the default value here. */
    DeviceClass *dc = DEVICE_CLASS(klass);
    dc->init = virtio_device_init;
    dc->exit = virtio_device_exit;
    dc->bus_type = TYPE_VIRTIO_BUS;
}

